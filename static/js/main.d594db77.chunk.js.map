{"version":3,"sources":["types/filterTodoStatus.ts","utils/api.ts","store/selectedUser.ts","store/todos.ts","store/index.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","ui/Dropdown.tsx","components/TodoListFilters/TodoListFilters.tsx","App.tsx","index.tsx"],"names":["FilterTodoStatus","BASE_URL","request","a","endPoint","data","fetch","response","json","Error","API","userId","SET_USER","CLEAR_USER","actions","setUser","payload","type","fetchUser","dispatch","user","console","log","clearUser","initialState","selectedUser","state","action","initState","todos","showStatus","All","SET_TODOS","SET_TODOS_STATUS","DELETE_TODO","setTodos","fetchTodos","setStatus","deleteTodo","filter","todo","id","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","TodoList","React","memo","handleSetUserId","selectedUserId","useDispatch","className","length","map","classNames","completed","checked","readOnly","title","onClick","actionsTodos","CurrentUser","name","email","phone","actionsSelectedUser","Dropdown","dropdownList","defaultValue","switchValue","useState","open","setOpen","show","el","TodoListFilters","query","setQuery","status","handleStatus","placeholder","value","onChange","e","target","App","listStatusFilter","useMemo","Object","values","setSelectedUserId","searchQuery","setSearchQuery","appliedQuery","setAppliedQuery","useSelector","modifyTodos","useEffect","applyQuery","useCallback","debounce","newQuery","Completed","NotCompleted","sortByStatus","toLowerCase","includes","newStatus","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d594db77.chunk.js","sourcesContent":["export enum FilterTodoStatus {\n  All = 'All',\n  Completed = 'Completed',\n  NotCompleted = 'Not completed',\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (endPoint = '') => {\n  let data = [];\n\n  try {\n    const response = await fetch(`${BASE_URL}${endPoint}`);\n\n    data = await response.json();\n  } catch (error) {\n    throw new Error(`Error with request ${error}`);\n  }\n\n  return data;\n};\n\nexport const API = {\n  getTodo: () => request('/todos'),\n  getUserInfo: (userId: number) => request(`/users/${userId}`),\n};\n","import { AnyAction, Dispatch } from 'redux';\nimport { User } from '../types/user';\nimport { API } from '../utils/api';\n\nconst SET_USER = 'SET_USER';\nconst CLEAR_USER = 'CLEAR_USER';\n\nexport type InitialSelectedUser = {\n  user: User | null\n};\n\nexport const actions = {\n  setUser: (payload: User | null) => ({ type: SET_USER, payload }),\n  fetchUser(userId: number) {\n    return async (dispatch: Dispatch) => {\n      try {\n        const user = await API.getUserInfo(userId);\n\n        dispatch(this.setUser(user));\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    };\n  },\n  clearUser: () => ({ type: CLEAR_USER }),\n};\n\nconst initialState: InitialSelectedUser = {\n  user: null,\n};\n\nconst selectedUser = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_USER:\n      return {\n        ...state,\n        user: action.payload,\n      };\n\n    case CLEAR_USER:\n      return {\n        ...state,\n        user: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default selectedUser;\n","import { AnyAction, Dispatch } from 'redux';\nimport { FilterTodoStatus } from '../types/filterTodoStatus';\nimport { Todo } from '../types/todo';\nimport { API } from '../utils/api';\n\nexport type InitStateTodo = {\n  todos: Todo[] | never[];\n  showStatus: string;\n};\n\nconst initState: InitStateTodo = {\n  todos: [],\n  showStatus: FilterTodoStatus.All,\n};\n\nconst SET_TODOS = 'SET_TODOS';\nconst SET_TODOS_STATUS = 'SET_TODOS_STATUS';\nconst DELETE_TODO = 'DELETE_TODO';\n\nexport const actions = {\n  setTodos: (payload: Todo[]) => ({\n    type: SET_TODOS,\n    payload,\n  }),\n\n  fetchTodos() {\n    return async (dispatch: Dispatch) => {\n      try {\n        const data = await API.getTodo();\n\n        dispatch(this.setTodos(data));\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    };\n  },\n  setStatus: (payload: string) => ({ type: SET_TODOS_STATUS, payload }),\n  deleteTodo: (payload: string | number) => ({ type: DELETE_TODO, payload }),\n};\n\nexport function getTodos() {\n  return (state: Todo[]) => state;\n}\n\nconst todos = (state: InitStateTodo = initState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_TODOS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n\n    case SET_TODOS_STATUS:\n      return {\n        ...state,\n        showStatus: action.payload,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter((todo: Todo) => todo.id !== action.payload),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default todos;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport selectedUser, { InitialSelectedUser } from './selectedUser';\nimport todos, { InitStateTodo } from './todos';\n\nexport type RootReducer = {\n  todos: InitStateTodo,\n  selectedUser: InitialSelectedUser\n};\n\n// Action types - is just a constant. MUST have a unique value.\n// Action creators - a function returning an action object\n// Selectors - a function receiving Redux state and returning some data from it\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = combineReducers({\n  todos,\n  selectedUser,\n});\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\n// const store = createStore(\n//   rootReducer,\n//   composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n// );\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","import classNames from 'classnames';\nimport React, { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as actionsTodos } from '../../store/todos';\nimport { Todo } from '../../types/todo';\n\ntype Props = {\n  todos: Todo[];\n  handleSetUserId: (id: number) => void,\n  selectedUserId: number,\n};\n\nexport const TodoList: FC<Props> = React.memo(({ todos, handleSetUserId, selectedUserId }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = (id: number | string) => {\n    dispatch(actionsTodos.deleteTodo(id));\n  };\n\n  return (\n    <ul className=\"list-group\">\n      {!!todos.length && (\n        todos.map((todo) => (\n          <li\n            key={todo.id}\n            className={classNames(\n              'list-group-item d-flex',\n              {\n                'list-group-item-warning': !todo.completed,\n                'list-group-item-success': todo.completed,\n              },\n            )}\n          >\n            <input\n              className=\"form-check-input me-1\"\n              type=\"checkbox\"\n              checked={todo.completed}\n              readOnly\n            />\n            {todo.title}\n\n            <button\n              type=\"button\"\n              className=\"badge bg-primary\"\n              onClick={() => handleDelete(todo.id)}\n            >\n              Delete\n            </button>\n            <button\n              type=\"button\"\n              className={classNames(\n                'badge bg-primary rounded-pill ms-auto',\n                {\n                  'bg-success': selectedUserId === todo.userId,\n                },\n              )}\n              onClick={() => handleSetUserId(todo.userId)}\n            >\n              User Id: - &ensp;\n              {todo.userId}\n            </button>\n          </li>\n        ))\n      )}\n    </ul>\n  );\n});\n","import { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as actionsSelectedUser } from '../../store/selectedUser';\nimport { User } from '../../types/user';\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const CurrentUser: FC<Props> = ({ user }) => {\n  const dispatch = useDispatch();\n\n  const handleClear = () => {\n    dispatch(actionsSelectedUser.clearUser());\n  };\n\n  return (\n    <>\n      {user ? (\n        <div className=\"User\">\n          <div className=\"UserSelectedInfo\">\n            Selected user:\n            {user.id}\n          </div>\n          <div className=\"UserBody\">\n            <div className=\"UserName\">\n              Name:&ensp;\n              {user.name}\n            </div>\n            <div className=\"UserMail\">\n              Email:&ensp;\n              {user.email}\n            </div>\n            <div className=\"UserPhone\">\n              Phone:&ensp;\n              {user.phone}\n            </div>\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      ) : <div className=\"User\">User not selected</div>}\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { FC, useState } from 'react';\n\ntype Props = {\n  dropdownList: string[];\n  defaultValue: string,\n  switchValue: (value: string) => void,\n};\n\nexport const Dropdown: FC<Props> = ({ dropdownList, defaultValue, switchValue }) => {\n  const [open, setOpen] = useState(false);\n\n  const handleChange = (newSelected: string) => {\n    switchValue(newSelected);\n    setOpen(!open);\n  };\n\n  return (\n    <div className=\"dropdown w-100\">\n      <button\n        className={classNames('btn btn-secondary dropdown-toggle w-100', { show: open })}\n        type=\"button\"\n        aria-expanded=\"false\"\n        onClick={() => setOpen(!open)}\n      >\n        {defaultValue}\n      </button>\n      <ul className={classNames('dropdown-menu dropdown-menu-dark', { show: open })}>\n        {!!dropdownList.length && (\n          dropdownList.map((el: string) => (\n            defaultValue !== el && (\n              <li\n                key={el}\n              >\n                <button\n                  type=\"button\"\n                  className=\"dropdown-item\"\n                  onClick={() => handleChange(el)}\n                >\n                  {el}\n                </button>\n              </li>\n            )\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport { Dropdown } from '../../ui/Dropdown';\n\ntype Props = {\n  query: string,\n  setQuery: (text: string) => void,\n  dropdownList: string[],\n  status: string,\n  handleStatus: (newStatus: string) => void,\n};\n\nexport const TodoListFilters: FC<Props> = ({\n  query,\n  setQuery,\n  dropdownList,\n  status,\n  handleStatus,\n}) => {\n  return (\n    <div className=\"TodoListFilters mb-4 d-flex\">\n      <input\n        type=\"text\"\n        className=\"form-control me-3\"\n        placeholder=\"Search\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n      />\n\n      <div className=\"w-25\">\n        <Dropdown\n          defaultValue={status}\n          switchValue={handleStatus}\n          dropdownList={dropdownList}\n        />\n      </div>\n    </div>\n  );\n};\n","import {\n  FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoListFilters } from './components/TodoListFilters/TodoListFilters';\nimport { FilterTodoStatus } from './types/filterTodoStatus';\nimport './App.scss';\nimport { actions as actionsTodos } from './store/todos';\nimport { actions as actionsSelectedUser } from './store/selectedUser';\nimport { RootReducer } from './store';\nimport { User } from './types/user';\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n\n  const listStatusFilter = useMemo(() => {\n    return Object.values(FilterTodoStatus);\n  }, []);\n\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [appliedQuery, setAppliedQuery] = useState('');\n\n  const todos = useSelector((state: RootReducer) => state.todos.todos);\n  const selectedUser: User | null = useSelector((state: RootReducer) => state.selectedUser.user);\n  const status = useSelector((state: RootReducer) => state.todos.showStatus);\n\n  // eslint-disable-next-line no-console\n  console.log(selectedUser);\n\n  let modifyTodos = todos;\n\n  useEffect(() => {\n    dispatch(actionsTodos.fetchTodos());\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser?.id !== selectedUserId) {\n      dispatch(actionsSelectedUser.fetchUser(selectedUserId));\n    }\n  }, [selectedUserId]);\n\n  const filterByQuery = () => {\n    modifyTodos = modifyTodos.filter(todo => {\n      const query = appliedQuery.toLowerCase();\n      const todoTitle = todo.title.toLowerCase();\n\n      return todoTitle.includes(query);\n    });\n  };\n\n  const sortByStatus = () => {\n    switch (status) {\n      case FilterTodoStatus.All:\n        modifyTodos = todos;\n        break;\n\n      case FilterTodoStatus.Completed:\n        modifyTodos = modifyTodos.filter(todo => todo.completed);\n        break;\n\n      case FilterTodoStatus.NotCompleted:\n        modifyTodos = modifyTodos.filter(todo => !todo.completed);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const applyQuery = useCallback(\n    debounce((newQuery) => {\n      setAppliedQuery(newQuery);\n    }, 1000),\n    [],\n  );\n\n  if (status.length) {\n    sortByStatus();\n  }\n\n  if (searchQuery.length) {\n    filterByQuery();\n  }\n\n  const handleSetUserId = useCallback((id: number) => {\n    if (id !== selectedUserId) {\n      setSelectedUserId(id);\n    }\n  }, [selectedUserId]);\n\n  const handleQuery = (newQuery: string) => {\n    setSearchQuery(newQuery);\n    applyQuery(newQuery);\n  };\n\n  const handleStatus = (newStatus: string) => {\n    dispatch(actionsTodos.setStatus(newStatus));\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-12 mb-3\">\n            <h1>Redux list of todos</h1>\n          </div>\n          <div className=\"col-sm-8\">\n            <TodoListFilters\n              query={searchQuery}\n              setQuery={handleQuery}\n              dropdownList={listStatusFilter}\n              status={status}\n              handleStatus={handleStatus}\n            />\n            <TodoList\n              todos={modifyTodos}\n              handleSetUserId={handleSetUserId}\n              selectedUserId={selectedUserId}\n            />\n          </div>\n          <div className=\"col-sm-4\">\n            <CurrentUser\n              user={selectedUser}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}